// ----------------------------------------------
//                Mobile First Grid
// ----------------------------------------------

* {
  box-sizing: border-box;
}

// Micro Clearfix - http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix:before,
.clearfix:after,
.row:before,
.row:after {
  display: table;
  content: " ";
}

.row:after,
.clearfix:after {
  clear: both;
}

// Rows
.row {
  position: relative;
  margin-left: -$grid-gutter;
  margin-right: -$grid-gutter;
}

// Container
.container {
  padding-left: $grid-gutter;
  padding-right: $grid-gutter;
  margin-left: auto;
  margin-right: auto;
}
.container-full {
  padding-left: 0;
  padding-right: 0;
  margin-left: auto;
  margin-right: auto;
}
.container, .container-full {
  width: $container;
  max-width: $container-max-width;
}

// Columns
$columns: 12;

@for $i from 1 through $columns {
  .col-#{$i} {
    width: ($i / $columns) * 100%;
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;
    position: relative;
    float: left;
  }
}

// Small Grid
@include breakpoint(s) {
  $columns: 12;
  @for $i from 1 through $columns {
    .col-#{$i}-s {
      width: ($i / $columns) * 100%;
      padding-left: $grid-gutter-m;
      padding-right: $grid-gutter-m;
      position: relative;
      float: left;
    }
  }
}

// Medium Grid
@include breakpoint(m) {
  $columns: 12;
  @for $i from 1 through $columns {
    .col-#{$i}-m {
      width: ($i / $columns) * 100%;
      padding-left: $grid-gutter-m;
      padding-right: $grid-gutter-m;
      position: relative;
      float: left;
    }
  }
}

// Large Grid
@include breakpoint(l) {
  $columns: 12;
  @for $i from 1 through $columns {
    .col-#{$i}-l {
      width: ($i / $columns) * 100%;
      padding-left: $grid-gutter-l;
      padding-right: $grid-gutter-l;
      position: relative;
      float: left;
    }
  }
}

// Extra Large Grid
@include breakpoint(xl) {
  $columns: 12;
  @for $i from 1 through $columns {
    .col-#{$i}-xl {
      width: ($i / $columns) * 100%;
      padding-left: $grid-gutter-xl;
      padding-right: $grid-gutter-xl;
      position: relative;
      float: left;
    }
  }
}

// Clear Grids
// Add to .row
$sizes: 2, 3, 4, 5, 6;

@each $size in $sizes {
  @include between-breakpoint($breakpoint-s, $breakpoint-m ) {
    .clear-#{$size}-sm {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include between-breakpoint($breakpoint-s, $breakpoint-l ) {
    .clear-#{$size}-sl {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include between-breakpoint($breakpoint-m, $breakpoint-xl ) {
    .clear-#{$size}-sxl {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include between-breakpoint($breakpoint-m, $breakpoint-l ) {
    .clear-#{$size}-ml {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include between-breakpoint($breakpoint-m, $breakpoint-xl ) {
    .clear-#{$size}-mxl {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include between-breakpoint($breakpoint-l, $breakpoint-xl ) {
    .clear-#{$size}-lxl {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include breakpoint(s) {
    .clear-#{$size}-s {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include breakpoint(m) {
    .clear-#{$size}-m {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include breakpoint(l) {
    .clear-#{$size}-l {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
  @include breakpoint(xl) {
    .clear-#{$size}-xl {
      [class*="col"]:nth-child(#{$size}n+1) {
        clear: both;
      }
    }
  }
}
